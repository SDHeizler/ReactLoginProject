{"version":3,"sources":["Context/GlobalState.js","Components/Home.js","Components/Register.js","Components/Login.js","Components/UserPage.js","App.js","index.js"],"names":["globalContext","React","createContext","config","headers","GlobalStateProvider","state","LoginEmail","LoginPassword","RegisterUsername","RegisterEmail","RegisterPassword","ConfirmPassword","CharacterLength","CapitalLetter","SpecialSymbol","UserPosts","UserPost","RegisterButtonDisabled","InvalidCharacterLength","InvalidSpecialSymbol","InvalidCapitalLetter","InvalidConfirmPassword","InvalidConfirmPasswordWarning","RegistrationError","RegisterAccountSuccess","LoginFailedWarning","UserID","UserUsername","Loading","Redirect","LoginFailedText","loginEmailChange","e","value","target","setState","loginPasswordChange","registerUsernameChange","registerEmailChange","registerPasswordChange","length","test","confirmPasswordChange","registerformSubmit","a","preventDefault","passMatchTest","axios","post","registerUsername","registerEmail","registerPassword","then","response","catch","err","res","InvalidSpecialCharacter","loginFormSubmit","auth","loginEmail","loginPassword","data","id","username","posts","window","sessionStorage","setItem","JSON","stringify","token","props","history","push","error","inputPostChange","addPostSubmit","getId","getItem","getToken","userId","parse","newUserPost","uuidv4","put","params","console","log","deletePostClick","delete","deletePost","closeRegisterAccountSuccessClick","closeLoginFailedWarningClick","getUserData","get","logOutClick","removeItem","Provider","this","children","Component","withRouter","Home","className","to","Register","style","display","context","onClick","onSubmit","onChange","htmlFor","type","required","name","placeholder","textDecoration","border","contextType","Login","User","map","ele","App","GlobalState","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7330e8e.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {v4 as uuidv4} from 'uuid';\r\n// CreateContext\r\nexport const globalContext = React.createContext();\r\n\r\nconst config = {\r\n    headers : {\"Access-Control-Allow-Origin\": \"http://localhost:3000/ReactLoginProject\", \r\n\"Content-Type\": 'application/json'} \r\n};\r\n// GlobalState\r\nclass GlobalStateProvider extends React.Component {\r\n    state = {\r\n        LoginEmail:'',\r\n        LoginPassword:'',\r\n        RegisterUsername:'',\r\n        RegisterEmail:'',\r\n        RegisterPassword:'',\r\n        ConfirmPassword:'',\r\n        CharacterLength:false,\r\n        CapitalLetter:false,\r\n        SpecialSymbol:false,\r\n        UserPosts:[],\r\n        UserPost:'',\r\n        RegisterButtonDisabled:false,\r\n        InvalidCharacterLength:'',\r\n        InvalidSpecialSymbol:'',\r\n        InvalidCapitalLetter:'',\r\n        InvalidConfirmPassword:'',\r\n        InvalidConfirmPasswordWarning:'none',\r\n        RegistrationError:'',\r\n        RegisterAccountSuccess:false,\r\n        LoginFailedWarning:false,\r\n        UserID:'',\r\n        UserUsername:'',\r\n        Loading:false,\r\n        Redirect:false,\r\n        LoginFailedText:'Login Failed',\r\n    };\r\n    // Function for login email input\r\n    loginEmailChange = (e) => {\r\n        let value = e.target.value;\r\n            this.setState({\r\n                ...this.state,\r\n                LoginEmail:value\r\n            })\r\n    };\r\n    // Function for login password input\r\n    loginPasswordChange = (e) => {\r\n        let value = e.target.value;\r\n        this.setState({\r\n                ...this.state,\r\n                LoginPassword:value\r\n            })\r\n    };\r\n    // Function for register username input\r\n    registerUsernameChange = (e) => {\r\n        let value = e.target.value;\r\n        this.setState({\r\n                ...this.state,\r\n                RegisterUsername:value\r\n            })\r\n    };\r\n    // Function for register email input\r\n    registerEmailChange = (e) => {\r\n        let value = e.target.value;\r\n        this.setState({\r\n                ...this.state,\r\n                RegisterEmail:value\r\n            })\r\n    };\r\n    // Function for register password input. Checks to make sure that password meets criteria. \r\n    registerPasswordChange = (e) => {\r\n        let value = e.target.value;\r\n        let capRegex = /[A-Z]/;\r\n        let specSymbolRegex = /(?=.*[!@#$%^&*])/;\r\n        this.setState({\r\n            ...this.state,\r\n            RegisterPassword:value,\r\n            CharacterLength:this.state.RegisterPassword.length >= 8 ? true : false,\r\n            CapitalLetter:capRegex.test(this.state.RegisterPassword) !== true || this.state.RegisterPassword.length <= 1 ? false : true,\r\n            SpecialSymbol: specSymbolRegex.test(this.state.RegisterPassword) !== true || this.state.RegisterPassword.length <= 1 ? false: true,\r\n            });\r\n    };\r\n    // Function to the confirm password input. Last check to make sure that the password the user has typed is correct before saving to database.\r\n    confirmPasswordChange = (e) => {\r\n        let value = e.target.value;\r\n        this.setState({\r\n                ...this.state,\r\n                ConfirmPassword:value\r\n            })\r\n    };\r\n    // Function for form submit on register account form. Makes post reguest to the backend. If errors then the incorrect input will be highlighted and post request will not happen.\r\n    registerformSubmit = async (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            ...this.state,\r\n            InvalidCharacterLength:'',\r\n            InvalidSpecialSymbol:'',\r\n            InvalidCapitalLetter:'',\r\n            InvalidConfirmPassword:'',\r\n            InvalidConfirmPasswordWarning:'none',\r\n            RegisterAccountSuccess:false,\r\n        });\r\n        let passMatchTest = this.state.RegisterPassword === this.state.ConfirmPassword ? true : false;\r\n        if(this.state.SpecialSymbol && this.state.CharacterLength && this.state.CapitalLetter && passMatchTest){\r\n           let res = await axios.post('https://immense-fjord-31204.herokuapp.com/Register', config,  {\r\n                registerUsername:this.state.RegisterUsername,\r\n                registerEmail:this.state.RegisterEmail,\r\n                registerPassword:this.state.RegisterPassword\r\n            })\r\n            .then((response) => {\r\n                    this.setState({\r\n                        RegisterAccountSuccess:true,\r\n                        RegisterUsername:'',\r\n                        RegisterEmail:'',\r\n                        RegisterPassword:'',\r\n                        ConfirmPassword:'',\r\n                        CharacterLength:false,\r\n                        CapitalLetter:false,\r\n                        SpecialSymbol:false,\r\n                    })\r\n            })\r\n            .catch((err) => {\r\n                this.setState({\r\n                    ...this.state,\r\n                    InvalidConfirmPasswordWarning:'',\r\n                    RegistrationError:\"User Already Exists\"\r\n                })\r\n            });\r\n            return res;\r\n        }else{\r\n            if(!this.state.SpecialSymbol){\r\n                this.setState({\r\n                    ...this.state,\r\n                    InvalidSpecialCharacter:'1px solid Red'\r\n                })\r\n            }\r\n            if(!this.state.CharacterLength){\r\n                this.setState({\r\n                    ...this.state,\r\n                    InvalidCharacterLength:'1px solid Red'\r\n                })\r\n            }\r\n            if(!this.state.CapitalLetter){\r\n                this.setState({\r\n                    ...this.state,\r\n                    InvalidCapitalLetter:'1px solid Red'\r\n                })\r\n            }\r\n            if(!passMatchTest){\r\n                this.setState({\r\n                    ...this.state,\r\n                    InvalidConfirmPassword:'3px solid Red',\r\n                    InvalidConfirmPasswordWarning:'',\r\n                    RegistrationError:\"Password doesn't match\"\r\n                })\r\n            }\r\n        }\r\n    }\r\n    // Function for login form submit. Checks for email and password then makes a post request to the backend.\r\n    loginFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            ...this.state,\r\n            LoginFailedWarning:false,\r\n            LoginFailedText:'Login Failed',\r\n        });\r\n        if(!this.state.LoginEmail){\r\n            this.setState({\r\n                    ...this.state,\r\n                    LoginFailedText:'Login Failed, No Email',\r\n                    LoginFailedWarning:true,\r\n                    LoginEmail:'',\r\n                    LoginPassword:'',\r\n                })\r\n        }else if(!this.state.LoginPassword){\r\n            this.setState({\r\n                    ...this.state,\r\n                    LoginFailedText:'Login Failed, No Password',\r\n                    LoginFailedWarning:true,\r\n                    LoginEmail:'',\r\n                    LoginPassword:'',\r\n                })\r\n        }else{\r\n            let res = await axios.post('https://immense-fjord-31204.herokuapp.com/Login',{auth : {\r\n            loginEmail:this.state.LoginEmail,\r\n            loginPassword:this.state.LoginPassword\r\n        }})\r\n        .then((response) => {\r\n            this.setState({\r\n                ...this.state,\r\n                LoginEmail:'',\r\n                LoginPassword:'',\r\n                UserID:response.data.id,\r\n                UserUsername:response.data.username,\r\n                Loading:true,\r\n                LoginFailedWarning:false,\r\n                UserPosts:response.data.posts\r\n            })\r\n            window.sessionStorage.setItem(\"id\", JSON.stringify(this.state.UserID));\r\n            window.sessionStorage.setItem(\"token\", JSON.stringify(response.data.token));\r\n            this.props.history.push(`/Login/User/`)\r\n        })\r\n        .catch((error) => {\r\n            this.setState({\r\n                    ...this.state,\r\n                    LoginFailedWarning:true,\r\n                    LoginEmail:'',\r\n                    LoginPassword:'',\r\n            })\r\n        })\r\n        return res;\r\n        }\r\n        \r\n    }\r\n    // Function for the input on the /Login/User private route\r\n    inputPostChange = (e) => {\r\n        let value = e.target.value\r\n        this.setState({\r\n            ...this.state,\r\n            UserPost:value\r\n        })\r\n    };\r\n    // Function for making adding a post. Makes put request to the backend.\r\n    addPostSubmit = async (e) => {\r\n        e.preventDefault();\r\n        let getId = window.sessionStorage.getItem(\"id\");\r\n        let getToken = window.sessionStorage.getItem('token');\r\n        let userId = JSON.parse(getId);\r\n        let token = JSON.parse(getToken);\r\n        let newUserPost = {id:uuidv4(), post:this.state.UserPost}\r\n        let res = await\r\n        axios.put(`https://immense-fjord-31204.herokuapp.com/Login/User/${userId}`, {\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"x-auth-token\":token\r\n            },\r\n            params:{\r\n                post:newUserPost\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if(response){\r\n                this.setState({\r\n                    ...this.state,\r\n                    UserPosts:response.data,\r\n                    UserPost:''\r\n                })\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        });\r\n        return res;\r\n    }\r\n    // Function for deleting post. Makes delete request to the backend.\r\n    deletePostClick = async (id) => {\r\n        let getId = window.sessionStorage.getItem(\"id\");\r\n        let getToken = window.sessionStorage.getItem('token');\r\n        let userId = JSON.parse(getId);\r\n        let token = JSON.parse(getToken);\r\n        let res = await\r\n        axios.delete(`https://immense-fjord-31204.herokuapp.com/Login/User/${userId}`, {\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"x-auth-token\":token\r\n            },\r\n            data:{\r\n                deletePost:id\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if(response){\r\n                this.setState({\r\n                    ...this.state,\r\n                    UserPosts:response.data\r\n                })\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        });\r\n        return res;\r\n    }\r\n    // Function for closing the success pop up after you successfully create and user account.\r\n    closeRegisterAccountSuccessClick = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            RegisterAccountSuccess:false\r\n        })\r\n    }\r\n    // Function for closing the error pop up if user failed to login successfully.\r\n    closeLoginFailedWarningClick = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            LoginFailedWarning:false\r\n        })\r\n    }\r\n    // Function for /Login/User private route. On the componentDidMount, makes a Get request to the backend to receive the username, id, and posts.\r\n    getUserData = async () => {\r\n        let getId = window.sessionStorage.getItem(\"id\");\r\n        let getToken = window.sessionStorage.getItem('token');\r\n        let userId = JSON.parse(getId);\r\n        let token = JSON.parse(getToken);\r\n        if(!token){\r\n            this.props.history.push('/Login')\r\n        }else{\r\n            let res = await \r\n        axios.get(`https://immense-fjord-31204.herokuapp.com/Login/User/${userId}`, {\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                'x-auth-token': token,\r\n            },\r\n            \r\n        })\r\n        .then((response) => {\r\n            if(response){\r\n                this.setState({\r\n                    ...this.state,\r\n                    UserID:response.data.id,\r\n                    UserUsername:response.data.username,\r\n                    UserPosts:response.data.posts\r\n                })\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n            this.props.history.push('/Login')\r\n        });\r\n        return res;\r\n        }\r\n        \r\n    }\r\n    // Function for logging out of /Login/User route. Resets state and removes JWT and id from session storage\r\n    logOutClick = () => {\r\n       this.setState({\r\n            ...this.state,\r\n            UserID:'',\r\n            UserUsername:'',\r\n            UserPosts:''\r\n        });\r\n        window.sessionStorage.removeItem(\"id\");\r\n        window.sessionStorage.removeItem(\"token\");\r\n        this.props.history.push('/ReactLoginProject');\r\n    }\r\n    render() { \r\n        return ( \r\n            <globalContext.Provider value={\r\n                {state:\r\n                this.state, \r\n                loginEmailChange:this.loginEmailChange, \r\n                loginPasswordChange:this.loginPasswordChange,\r\n                registerUsernameChange:this.registerUsernameChange,\r\n                registerEmailChange:this.registerEmailChange,\r\n                registerPasswordChange:this.registerPasswordChange,\r\n                confirmPasswordChange:this.confirmPasswordChange,\r\n                registerformSubmit:this.registerformSubmit,\r\n                loginFormSubmit:this.loginFormSubmit,  \r\n                inputPostChange:this.inputPostChange,\r\n                addPostSubmit:this.addPostSubmit,\r\n                deletePostClick:this.deletePostClick,\r\n                closeRegisterAccountSuccessClick:this.closeRegisterAccountSuccessClick,\r\n                closeLoginFailedWarningClick:this.closeLoginFailedWarningClick,\r\n                getUserData:this.getUserData,\r\n                logOutClick:this.logOutClick, \r\n                }}>\r\n                {this.props.children}\r\n            </globalContext.Provider>\r\n         );\r\n    }\r\n};\r\n export default withRouter(GlobalStateProvider);\r\n\r\n\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Home extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div className='HomePageContainerStyle'>\r\n                <h1>Welcome!</h1>\r\n                <div className='LinkContainerStyle'>\r\n                    <div className='LinkDivStyle'><Link to='/Register' className='CreateAccountLink'>Create Account</Link></div>\r\n                    <div className='LinkDivStyle'><Link to='/Login' className='LoginLink'  >Login</Link></div>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport{globalContext} from '../Context/GlobalState';\r\nimport PropTypes from 'prop-types';\r\nclass Register extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <div style={{display:this.context.state.RegisterAccountSuccess ? '' : 'none'}} className=\"container alert alert-success RegisterAccountCreatedAlert\" >\r\n                        Account Created\r\n                        <button onClick={this.context.closeRegisterAccountSuccessClick} className=\"btn-close \"></button>\r\n                    </div>\r\n                <form onSubmit={(e) => this.context.registerformSubmit(e)} className='container CreateAccountForm'>\r\n                    <label>UserName</label>\r\n                    <input  \r\n                    onChange={(e) => this.context.registerUsernameChange(e)} \r\n                    htmlFor='UserName' \r\n                    type='text' \r\n                    required \r\n                    name='RegisterUsername' \r\n                    value={this.context.state.RegisterUsername} \r\n                    placeholder='Enter Username'></input>\r\n                    <label>Email</label>\r\n                    <input  \r\n                    onChange={(e) => this.context.registerEmailChange(e)} \r\n                    htmlFor='Email' \r\n                    type='email' \r\n                    required \r\n                    name='RegisterEmail' \r\n                    value={this.context.state.RegisterEmail} \r\n                    placeholder='Enter Email'></input>\r\n                    <label>Password</label>\r\n                    <input\r\n                    onChange={(e) => this.context.registerPasswordChange(e)} \r\n                    htmlFor='Password' \r\n                    type='password' \r\n                    required \r\n                    name='RegisterPassword' \r\n                    value={this.context.state.RegisterPassword} \r\n                    placeholder='Enter Password'></input>\r\n                    <ul className='CreateAccountUl'>\r\n                        <li style={{textDecoration:this.context.state.CharacterLength ? 'line-through' : '', border:this.context.state.InvalidCharacterLength}}>Password Must be at least 8 characters long</li>\r\n                        <li style={{textDecoration:this.context.state.CapitalLetter ? 'line-through' : '', border:this.context.state.InvalidCapitalLetter}}>Must include a Capital letter</li>\r\n                        <li style={{textDecoration:this.context.state.SpecialSymbol ? 'line-through' : '', border:this.context.state.InvalidSpecialCharacter}}>Must include a symbol ex. !,@,#,$,%,^,&,*</li>\r\n                    </ul>\r\n                    <label>Confirm Password</label>\r\n                    <input\r\n                    style={{border:this.context.state.InvalidConfirmPassword}}\r\n                    onChange={(e) => this.context.confirmPasswordChange(e)} htmlFor='ConfirmPassword' \r\n                    type='password' \r\n                    required \r\n                    name='ConfirmPassword' \r\n                    value={this.context.state.ConfirmPassword} placeholder='Confirm Password'></input>\r\n                    <p className='RegisterConfirmPasswordError'\r\n                    style={{display:this.context.state.InvalidConfirmPasswordWarning}} >{this.context.state.RegistrationError}</p>\r\n                    <button className='btn-primary' type='Submit'>Create Account</button>\r\n                </form>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nRegister.contextType = globalContext;\r\n// PropTypes\r\nRegister.propTypes = {\r\n    RegisterAccountSuccess : PropTypes.bool,\r\n    closeRegisterAccountSuccessClick : PropTypes.func,\r\n    registerformSubmit: PropTypes.func,\r\n    registerUsernameChange: PropTypes.func,\r\n    RegisterUsername:PropTypes.string,\r\n    registerEmailChange: PropTypes.func,\r\n    RegisterEmail: PropTypes.string,\r\n    registerPasswordChange: PropTypes.func,\r\n    RegisterPassword: PropTypes.string,\r\n    CharacterLength: PropTypes.bool,\r\n    InvalidCharacterLength: PropTypes.string,\r\n    CapitalLetter: PropTypes.bool,\r\n    InvalidCapitalLetter: PropTypes.string,\r\n    SpecialSymbol: PropTypes.bool,\r\n    InvalidSpecialCharacter: PropTypes.string,\r\n    InvalidConfirmPassword: PropTypes.string,\r\n    confirmPasswordChange: PropTypes.func,\r\n    ConfirmPassword: PropTypes.string,\r\n    InvalidConfirmPasswordWarning: PropTypes.string,\r\n    RegistrationError:PropTypes.string\r\n};\r\nexport default Register;","import React from 'react';\r\nimport  {globalContext} from '../Context/GlobalState';\r\nimport PropTypes from 'prop-types';\r\nclass Login extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <form onSubmit={(e) => this.context.loginFormSubmit(e)} className='container CreateAccountForm'>\r\n                    <label>Email</label>\r\n                    <input \r\n                    onChange={(e) => this.context.loginEmailChange(e)} \r\n                    htmlFor='Email' \r\n                    type='email' \r\n                    required\r\n                    name='LoginEmail' \r\n                    value={this.context.state.LoginEmail} \r\n                    placeholder='Enter Email'></input>\r\n                    <label>Password</label>\r\n                    <input \r\n                    onChange={(e) => this.context.loginPasswordChange(e)} \r\n                    htmlFor='Password' \r\n                    type='password' \r\n                    required \r\n                    name='LoginPassword' \r\n                    value={this.context.state.LoginPassword} \r\n                    placeholder='Enter Password'></input>\r\n                    <button className='btn-primary' type='Submit'>Login</button>\r\n                </form>\r\n                <div style={{display:this.context.state.LoginFailedWarning ? '' : 'none'}} className=\"container alert alert-danger LoginFailedAlert\" >\r\n                        {this.context.state.LoginFailedText}\r\n                        <button onClick={this.context.closeLoginFailedWarningClick} className=\"btn-close \"></button>\r\n                    </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nLogin.contextType = globalContext;\r\n// PropTypes\r\nLogin.propTypes = {\r\n    loginFormSubmit: PropTypes.func,\r\n    loginEmailChange: PropTypes.func,\r\n    LoginEmail: PropTypes.string,\r\n    loginPasswordChange: PropTypes.func,\r\n    LoginPassword: PropTypes.string,\r\n    LoginFailedWarning: PropTypes.bool,\r\n    closeLoginFailedWarningClick: PropTypes.func\r\n}; \r\nexport default Login;","import React from 'react';\r\nimport  {globalContext} from '../Context/GlobalState';\r\nimport PropTypes from 'prop-types';\r\nclass User extends React.Component {\r\n      componentDidMount(){\r\n        this.context.getUserData()\r\n    }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <nav className='navbar UserNav'>\r\n                    <h1 className='navbar-brand'>Hello {this.context.state.UserUsername}</h1>\r\n                    <button onClick={this.context.logOutClick} className='btn-danger'>Logout</button>\r\n                </nav>\r\n                <form onSubmit={(e) => this.context.addPostSubmit(e)} className=' UserInputDivContainer'>\r\n                    <input onChange={(e) => this.context.inputPostChange(e)} name='UserPost' type='text' placeholder='Enter posts' value={this.context.state.UserPost}></input>\r\n                    <button type='Submit' className='btn-primary'>Add Post</button>\r\n                </form>\r\n                <ul className='container UserPostList'>\r\n                    {this.context.state.UserPosts.map((ele) => {\r\n                        return (\r\n                            <li className='UserPostListItem' key={ele.id}>{ele.post}<button onClick={(id) => this.context.deletePostClick(ele.id)}>X</button></li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nUser.contextType = globalContext;\r\n// PropTypes\r\nUser.propTypes = {\r\n    UserUsername: PropTypes.string,\r\n    logOutClick: PropTypes.func,\r\n    addPostSubmit: PropTypes.func,\r\n    inputPostChange: PropTypes.func,\r\n    UserPost:PropTypes.string,\r\n    UserPosts: PropTypes.array,\r\n    deletePostClick: PropTypes.func\r\n};\r\nexport default User;","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport GlobalStateProvider, { globalContext} from './Context/GlobalState';\nimport Home from './Components/Home';\nimport Register from './Components/Register';\nimport Login from './Components/Login';\nimport User from './Components/UserPage';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n    <div className=\"App\">\n      <GlobalStateProvider>\n        <Switch>\n          <Route exact path='/ReactLoginProject' ><Home></Home></Route>\n          <Route path='/Register' ><Register></Register></Route>\n          <Route exact path='/Login' ><Login></Login></Route>\n          <Route path='/Login/User' ><User></User></Route>\n        </Switch>\n      </GlobalStateProvider>\n    </div>\n  );\n  }\n}\nApp.contextType = globalContext;\n\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}