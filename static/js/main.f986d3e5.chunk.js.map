{"version":3,"sources":["Context/GlobalState.js","Components/Home.js","Components/Register.js","Components/Login.js","Components/UserPage.js","Components/404.js","App.js","index.js"],"names":["globalContext","React","createContext","GlobalStateProvider","state","LoginEmail","LoginPassword","RegisterUsername","RegisterEmail","RegisterPassword","ConfirmPassword","CharacterLength","CapitalLetter","SpecialSymbol","UserPosts","UserPost","RegisterButtonDisabled","InvalidCharacterLength","InvalidSpecialSymbol","InvalidCapitalLetter","InvalidConfirmPassword","InvalidConfirmPasswordWarning","RegistrationError","RegisterAccountSuccess","LoginFailedWarning","UserID","UserUsername","Loading","Redirect","LoginFailedText","loginEmailChange","e","value","target","setState","loginPasswordChange","registerUsernameChange","registerEmailChange","testRegisterPassword","testPasswordLength","length","testPasswordCapitalLetter","test","testPasswordSpecialCharacter","registerPasswordChange","a","confirmPasswordChange","registerformSubmit","preventDefault","passMatchTest","axios","post","registerUsername","registerEmail","registerPassword","then","response","catch","err","res","InvalidSpecialCharacter","loginFormSubmit","auth","loginEmail","loginPassword","data","id","username","posts","window","sessionStorage","setItem","JSON","stringify","token","props","history","push","error","inputPostChange","addPostSubmit","getId","getItem","getToken","userId","parse","newUserPost","uuidv4","put","headers","params","console","log","deletePostClick","delete","deletePost","closeRegisterAccountSuccessClick","closeLoginFailedWarningClick","getUserData","get","logOutClick","removeItem","Provider","this","children","Component","withRouter","Home","className","to","Register","style","display","context","onClick","onSubmit","onChange","htmlFor","type","required","name","placeholder","textDecoration","border","contextType","Login","User","map","ele","NotFound","textAlign","App","GlobalState","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f986d3e5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// CreateContext\r\nexport const globalContext = React.createContext();\r\n\r\n// GlobalState\r\nclass GlobalStateProvider extends React.Component {\r\n  state = {\r\n    LoginEmail: \"\",\r\n    LoginPassword: \"\",\r\n    RegisterUsername: \"\",\r\n    RegisterEmail: \"\",\r\n    RegisterPassword: \"\",\r\n    ConfirmPassword: \"\",\r\n    CharacterLength: false,\r\n    CapitalLetter: false,\r\n    SpecialSymbol: false,\r\n    UserPosts: [],\r\n    UserPost: \"\",\r\n    RegisterButtonDisabled: false,\r\n    InvalidCharacterLength: \"\",\r\n    InvalidSpecialSymbol: \"\",\r\n    InvalidCapitalLetter: \"\",\r\n    InvalidConfirmPassword: \"\",\r\n    InvalidConfirmPasswordWarning: \"none\",\r\n    RegistrationError: \"\",\r\n    RegisterAccountSuccess: false,\r\n    LoginFailedWarning: false,\r\n    UserID: \"\",\r\n    UserUsername: \"\",\r\n    Loading: false,\r\n    Redirect: false,\r\n    LoginFailedText: \"Login Failed\",\r\n  };\r\n  // Function for login email input\r\n  loginEmailChange = (e) => {\r\n    let value = e.target.value;\r\n    this.setState({\r\n      ...this.state,\r\n      LoginEmail: value,\r\n    });\r\n  };\r\n  // Function for login password input\r\n  loginPasswordChange = (e) => {\r\n    let value = e.target.value;\r\n    this.setState({\r\n      ...this.state,\r\n      LoginPassword: value,\r\n    });\r\n  };\r\n  // Function for register username input\r\n  registerUsernameChange = (e) => {\r\n    let value = e.target.value;\r\n    this.setState({\r\n      ...this.state,\r\n      RegisterUsername: value,\r\n    });\r\n  };\r\n  // Function for register email input\r\n  registerEmailChange = (e) => {\r\n    let value = e.target.value;\r\n    this.setState({\r\n      ...this.state,\r\n      RegisterEmail: value,\r\n    });\r\n  };\r\n  testRegisterPassword = () => {\r\n    let capRegex = /[A-Z]/;\r\n    let specSymbolRegex = /(?=.*[!@#$%^&*])/;\r\n    let testPasswordLength =\r\n      this.state.RegisterPassword.length >= 8 ? true : false;\r\n    let testPasswordCapitalLetter = capRegex.test(this.state.RegisterPassword);\r\n    let testPasswordSpecialCharacter = specSymbolRegex.test(\r\n      this.state.RegisterPassword\r\n    );\r\n    this.setState({\r\n      ...this.state,\r\n      CharacterLength: testPasswordLength,\r\n      CapitalLetter: testPasswordCapitalLetter,\r\n      SpecialSymbol: testPasswordSpecialCharacter,\r\n    });\r\n  };\r\n  // Function for register password input. Checks to make sure that password meets criteria.\r\n  registerPasswordChange = async (e) => {\r\n    let value = e.target.value;\r\n    await this.setState({\r\n      ...this.state,\r\n      RegisterPassword: value,\r\n    });\r\n    await this.testRegisterPassword();\r\n  };\r\n  // Function to the confirm password input. Last check to make sure that the password the user has typed is correct before saving to database.\r\n  confirmPasswordChange = (e) => {\r\n    let value = e.target.value;\r\n    this.setState({\r\n      ...this.state,\r\n      ConfirmPassword: value,\r\n    });\r\n  };\r\n  // Function for form submit on register account form. Makes post reguest to the backend. If errors then the incorrect input will be highlighted and post request will not happen.\r\n  registerformSubmit = async (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      ...this.state,\r\n      InvalidCharacterLength: \"\",\r\n      InvalidSpecialSymbol: \"\",\r\n      InvalidCapitalLetter: \"\",\r\n      InvalidConfirmPassword: \"\",\r\n      InvalidConfirmPasswordWarning: \"none\",\r\n      RegisterAccountSuccess: false,\r\n    });\r\n    let passMatchTest =\r\n      this.state.RegisterPassword === this.state.ConfirmPassword ? true : false;\r\n    if (\r\n      this.state.SpecialSymbol &&\r\n      this.state.CharacterLength &&\r\n      this.state.CapitalLetter &&\r\n      passMatchTest\r\n    ) {\r\n      let res = await axios\r\n        .post(\"https://immense-fjord-31204.herokuapp.com/Register\", {\r\n          registerUsername: this.state.RegisterUsername,\r\n          registerEmail: this.state.RegisterEmail,\r\n          registerPassword: this.state.RegisterPassword,\r\n        })\r\n        .then((response) => {\r\n          this.setState({\r\n            RegisterAccountSuccess: true,\r\n            RegisterUsername: \"\",\r\n            RegisterEmail: \"\",\r\n            RegisterPassword: \"\",\r\n            ConfirmPassword: \"\",\r\n            CharacterLength: false,\r\n            CapitalLetter: false,\r\n            SpecialSymbol: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          this.setState({\r\n            ...this.state,\r\n            InvalidConfirmPasswordWarning: \"\",\r\n            RegistrationError: \"User Already Exists\",\r\n          });\r\n        });\r\n      return res;\r\n    } else {\r\n      if (!this.state.SpecialSymbol) {\r\n        this.setState({\r\n          ...this.state,\r\n          InvalidSpecialCharacter: \"1px solid Red\",\r\n        });\r\n      }\r\n      if (!this.state.CharacterLength) {\r\n        this.setState({\r\n          ...this.state,\r\n          InvalidCharacterLength: \"1px solid Red\",\r\n        });\r\n      }\r\n      if (!this.state.CapitalLetter) {\r\n        this.setState({\r\n          ...this.state,\r\n          InvalidCapitalLetter: \"1px solid Red\",\r\n        });\r\n      }\r\n      if (!passMatchTest) {\r\n        this.setState({\r\n          ...this.state,\r\n          InvalidConfirmPassword: \"3px solid Red\",\r\n          InvalidConfirmPasswordWarning: \"\",\r\n          RegistrationError: \"Password doesn't match\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n  // Function for login form submit. Checks for email and password then makes a post request to the backend.\r\n  loginFormSubmit = async (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      ...this.state,\r\n      LoginFailedWarning: false,\r\n      LoginFailedText: \"Login Failed\",\r\n    });\r\n    if (!this.state.LoginEmail) {\r\n      this.setState({\r\n        ...this.state,\r\n        LoginFailedText: \"Login Failed, No Email\",\r\n        LoginFailedWarning: true,\r\n        LoginEmail: \"\",\r\n        LoginPassword: \"\",\r\n      });\r\n    } else if (!this.state.LoginPassword) {\r\n      this.setState({\r\n        ...this.state,\r\n        LoginFailedText: \"Login Failed, No Password\",\r\n        LoginFailedWarning: true,\r\n        LoginEmail: \"\",\r\n        LoginPassword: \"\",\r\n      });\r\n    } else {\r\n      await axios\r\n        .post(\"https://immense-fjord-31204.herokuapp.com/Login\", {\r\n          auth: {\r\n            loginEmail: this.state.LoginEmail,\r\n            loginPassword: this.state.LoginPassword,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          this.setState({\r\n            ...this.state,\r\n            LoginEmail: \"\",\r\n            LoginPassword: \"\",\r\n            UserID: response.data.id,\r\n            UserUsername: response.data.username,\r\n            Loading: true,\r\n            LoginFailedWarning: false,\r\n            UserPosts: response.data.posts,\r\n          });\r\n          window.sessionStorage.setItem(\r\n            \"id\",\r\n            JSON.stringify(this.state.UserID)\r\n          );\r\n          window.sessionStorage.setItem(\r\n            \"token\",\r\n            JSON.stringify(response.data.token)\r\n          );\r\n          this.props.history.push(`/Login/User`);\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            ...this.state,\r\n            LoginFailedWarning: true,\r\n            LoginEmail: \"\",\r\n            LoginPassword: \"\",\r\n          });\r\n        });\r\n    }\r\n  };\r\n  // Function for the input on the /Login/User private route\r\n  inputPostChange = (e) => {\r\n    let value = e.target.value;\r\n    this.setState({\r\n      ...this.state,\r\n      UserPost: value,\r\n    });\r\n  };\r\n  // Function for making adding a post. Makes put request to the backend.\r\n  addPostSubmit = async (e) => {\r\n    e.preventDefault();\r\n    let getId = window.sessionStorage.getItem(\"id\");\r\n    let getToken = window.sessionStorage.getItem(\"token\");\r\n    let userId = JSON.parse(getId);\r\n    let token = JSON.parse(getToken);\r\n    let newUserPost = { id: uuidv4(), post: this.state.UserPost };\r\n    let res = await axios\r\n      .put(`https://immense-fjord-31204.herokuapp.com/Login/User/${userId}`, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"x-auth-token\": token,\r\n        },\r\n        params: {\r\n          post: newUserPost,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response) {\r\n          this.setState({\r\n            ...this.state,\r\n            UserPosts: response.data,\r\n            UserPost: \"\",\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    return res;\r\n  };\r\n  // Function for deleting post. Makes delete request to the backend.\r\n  deletePostClick = async (id) => {\r\n    let getId = window.sessionStorage.getItem(\"id\");\r\n    let getToken = window.sessionStorage.getItem(\"token\");\r\n    let userId = JSON.parse(getId);\r\n    let token = JSON.parse(getToken);\r\n    let res = await axios\r\n      .delete(\r\n        `https://immense-fjord-31204.herokuapp.com/Login/User/${userId}`,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-auth-token\": token,\r\n          },\r\n          data: {\r\n            deletePost: id,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response) {\r\n          this.setState({\r\n            ...this.state,\r\n            UserPosts: response.data,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    return res;\r\n  };\r\n  // Function for closing the success pop up after you successfully create and user account.\r\n  closeRegisterAccountSuccessClick = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      RegisterAccountSuccess: false,\r\n    });\r\n  };\r\n  // Function for closing the error pop up if user failed to login successfully.\r\n  closeLoginFailedWarningClick = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      LoginFailedWarning: false,\r\n    });\r\n  };\r\n  // Function for /Login/User private route. On the componentDidMount, makes a Get request to the backend to receive the username, id, and posts.\r\n  getUserData = async () => {\r\n    let getId = window.sessionStorage.getItem(\"id\");\r\n    let getToken = window.sessionStorage.getItem(\"token\");\r\n    let userId = JSON.parse(getId);\r\n    let token = JSON.parse(getToken);\r\n    if (!token) {\r\n      this.props.history.push(\"/Login\");\r\n    } else {\r\n      let res = await axios\r\n        .get(`https://immense-fjord-31204.herokuapp.com/Login/User/${userId}`, {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-auth-token\": token,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          if (response) {\r\n            this.setState({\r\n              ...this.state,\r\n              UserID: response.data.id,\r\n              UserUsername: response.data.username,\r\n              UserPosts: response.data.posts,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          this.props.history.push(\"/Login\");\r\n        });\r\n      return res;\r\n    }\r\n  };\r\n  // Function for logging out of /Login/User route. Resets state and removes JWT and id from session storage\r\n  logOutClick = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      UserID: \"\",\r\n      UserUsername: \"\",\r\n      UserPosts: \"\",\r\n    });\r\n    window.sessionStorage.removeItem(\"id\");\r\n    window.sessionStorage.removeItem(\"token\");\r\n    this.props.history.push(\"/ReactLoginProject\");\r\n  };\r\n  render() {\r\n    return (\r\n      <globalContext.Provider\r\n        value={{\r\n          state: this.state,\r\n          loginEmailChange: this.loginEmailChange,\r\n          loginPasswordChange: this.loginPasswordChange,\r\n          registerUsernameChange: this.registerUsernameChange,\r\n          registerEmailChange: this.registerEmailChange,\r\n          registerPasswordChange: this.registerPasswordChange,\r\n          confirmPasswordChange: this.confirmPasswordChange,\r\n          registerformSubmit: this.registerformSubmit,\r\n          loginFormSubmit: this.loginFormSubmit,\r\n          inputPostChange: this.inputPostChange,\r\n          addPostSubmit: this.addPostSubmit,\r\n          deletePostClick: this.deletePostClick,\r\n          closeRegisterAccountSuccessClick: this\r\n            .closeRegisterAccountSuccessClick,\r\n          closeLoginFailedWarningClick: this.closeLoginFailedWarningClick,\r\n          getUserData: this.getUserData,\r\n          logOutClick: this.logOutClick,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </globalContext.Provider>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(GlobalStateProvider);\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Home extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div className='HomePageContainerStyle'>\r\n                <h1>Welcome!</h1>\r\n                <div className='LinkContainerStyle'>\r\n                    <div className='LinkDivStyle'><Link to='/Register' className='CreateAccountLink'>Create Account</Link></div>\r\n                    <div className='LinkDivStyle'><Link to='/Login' className='LoginLink'  >Login</Link></div>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport{globalContext} from '../Context/GlobalState';\r\nimport PropTypes from 'prop-types';\r\nclass Register extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <div style={{display:this.context.state.RegisterAccountSuccess ? '' : 'none'}} className=\"container alert alert-success RegisterAccountCreatedAlert\" >\r\n                        Account Created\r\n                        <button onClick={this.context.closeRegisterAccountSuccessClick} className=\"btn-close \"></button>\r\n                    </div>\r\n                <form onSubmit={(e) => this.context.registerformSubmit(e)} className='container CreateAccountForm'>\r\n                    <label>UserName</label>\r\n                    <input  \r\n                    onChange={(e) => this.context.registerUsernameChange(e)} \r\n                    htmlFor='UserName' \r\n                    type='text' \r\n                    required \r\n                    name='RegisterUsername' \r\n                    value={this.context.state.RegisterUsername} \r\n                    placeholder='Enter Username'></input>\r\n                    <label>Email</label>\r\n                    <input  \r\n                    onChange={(e) => this.context.registerEmailChange(e)} \r\n                    htmlFor='Email' \r\n                    type='email' \r\n                    required \r\n                    name='RegisterEmail' \r\n                    value={this.context.state.RegisterEmail} \r\n                    placeholder='Enter Email'></input>\r\n                    <label>Password</label>\r\n                    <input\r\n                    onChange={(e) => this.context.registerPasswordChange(e)} \r\n                    htmlFor='Password' \r\n                    type='password' \r\n                    required \r\n                    name='RegisterPassword' \r\n                    value={this.context.state.RegisterPassword} \r\n                    placeholder='Enter Password'></input>\r\n                    <ul className='CreateAccountUl'>\r\n                        <li style={{textDecoration:this.context.state.CharacterLength ? 'line-through' : '', border:this.context.state.InvalidCharacterLength}}>Password Must be at least 8 characters long</li>\r\n                        <li style={{textDecoration:this.context.state.CapitalLetter ? 'line-through' : '', border:this.context.state.InvalidCapitalLetter}}>Must include a Capital letter</li>\r\n                        <li style={{textDecoration:this.context.state.SpecialSymbol ? 'line-through' : '', border:this.context.state.InvalidSpecialCharacter}}>Must include a symbol ex. !,@,#,$,%,^,&,*</li>\r\n                    </ul>\r\n                    <label>Confirm Password</label>\r\n                    <input\r\n                    style={{border:this.context.state.InvalidConfirmPassword}}\r\n                    onChange={(e) => this.context.confirmPasswordChange(e)} htmlFor='ConfirmPassword' \r\n                    type='password' \r\n                    required \r\n                    name='ConfirmPassword' \r\n                    value={this.context.state.ConfirmPassword} placeholder='Confirm Password'></input>\r\n                    <p className='RegisterConfirmPasswordError'\r\n                    style={{display:this.context.state.InvalidConfirmPasswordWarning}} >{this.context.state.RegistrationError}</p>\r\n                    <button className='btn-primary' type='Submit'>Create Account</button>\r\n                </form>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nRegister.contextType = globalContext;\r\n// PropTypes\r\nRegister.propTypes = {\r\n    RegisterAccountSuccess : PropTypes.bool,\r\n    closeRegisterAccountSuccessClick : PropTypes.func,\r\n    registerformSubmit: PropTypes.func,\r\n    registerUsernameChange: PropTypes.func,\r\n    RegisterUsername:PropTypes.string,\r\n    registerEmailChange: PropTypes.func,\r\n    RegisterEmail: PropTypes.string,\r\n    registerPasswordChange: PropTypes.func,\r\n    RegisterPassword: PropTypes.string,\r\n    CharacterLength: PropTypes.bool,\r\n    InvalidCharacterLength: PropTypes.string,\r\n    CapitalLetter: PropTypes.bool,\r\n    InvalidCapitalLetter: PropTypes.string,\r\n    SpecialSymbol: PropTypes.bool,\r\n    InvalidSpecialCharacter: PropTypes.string,\r\n    InvalidConfirmPassword: PropTypes.string,\r\n    confirmPasswordChange: PropTypes.func,\r\n    ConfirmPassword: PropTypes.string,\r\n    InvalidConfirmPasswordWarning: PropTypes.string,\r\n    RegistrationError:PropTypes.string\r\n};\r\nexport default Register;","import React from \"react\";\r\nimport { globalContext } from \"../Context/GlobalState\";\r\nimport PropTypes from \"prop-types\";\r\nclass Login extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form\r\n          onSubmit={(e) => this.context.loginFormSubmit(e)}\r\n          className=\"container CreateAccountForm\"\r\n        >\r\n          <label>Email: for showcase use TestUser@email.com</label>\r\n          <input\r\n            onChange={(e) => this.context.loginEmailChange(e)}\r\n            htmlFor=\"Email\"\r\n            type=\"email\"\r\n            required\r\n            name=\"LoginEmail\"\r\n            value={this.context.state.LoginEmail}\r\n            placeholder=\"Enter Email\"\r\n          ></input>\r\n          <label>Password: for showcase use P@ssword123</label>\r\n          <input\r\n            onChange={(e) => this.context.loginPasswordChange(e)}\r\n            htmlFor=\"Password\"\r\n            type=\"password\"\r\n            required\r\n            name=\"LoginPassword\"\r\n            value={this.context.state.LoginPassword}\r\n            placeholder=\"Enter Password\"\r\n          ></input>\r\n          <button className=\"btn-primary\" type=\"Submit\">\r\n            Login\r\n          </button>\r\n        </form>\r\n        <div\r\n          style={{\r\n            display: this.context.state.LoginFailedWarning ? \"\" : \"none\",\r\n          }}\r\n          className=\"container alert alert-danger LoginFailedAlert\"\r\n        >\r\n          {this.context.state.LoginFailedText}\r\n          <button\r\n            onClick={this.context.closeLoginFailedWarningClick}\r\n            className=\"btn-close \"\r\n          ></button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nLogin.contextType = globalContext;\r\n// PropTypes\r\nLogin.propTypes = {\r\n  loginFormSubmit: PropTypes.func,\r\n  loginEmailChange: PropTypes.func,\r\n  LoginEmail: PropTypes.string,\r\n  loginPasswordChange: PropTypes.func,\r\n  LoginPassword: PropTypes.string,\r\n  LoginFailedWarning: PropTypes.bool,\r\n  closeLoginFailedWarningClick: PropTypes.func,\r\n};\r\nexport default Login;\r\n","import React from 'react';\r\nimport  {globalContext} from '../Context/GlobalState';\r\nimport PropTypes from 'prop-types';\r\nclass User extends React.Component {\r\n      componentDidMount(){\r\n        this.context.getUserData()\r\n    }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <nav className='navbar UserNav'>\r\n                    <h1 className='navbar-brand'>Hello {this.context.state.UserUsername}</h1>\r\n                    <button onClick={this.context.logOutClick} className='btn-danger'>Logout</button>\r\n                </nav>\r\n                <form onSubmit={(e) => this.context.addPostSubmit(e)} className=' UserInputDivContainer'>\r\n                    <input onChange={(e) => this.context.inputPostChange(e)} name='UserPost' type='text' placeholder='Enter posts' value={this.context.state.UserPost}></input>\r\n                    <button type='Submit' className='btn-primary'>Add Post</button>\r\n                </form>\r\n                <ul className='container UserPostList'>\r\n                    {this.context.state.UserPosts.map((ele) => {\r\n                        return (\r\n                            <li className='UserPostListItem' key={ele.id}>{ele.post}<button onClick={(id) => this.context.deletePostClick(ele.id)}>X</button></li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nUser.contextType = globalContext;\r\n// PropTypes\r\nUser.propTypes = {\r\n    UserUsername: PropTypes.string,\r\n    logOutClick: PropTypes.func,\r\n    addPostSubmit: PropTypes.func,\r\n    inputPostChange: PropTypes.func,\r\n    UserPost:PropTypes.string,\r\n    UserPosts: PropTypes.array,\r\n    deletePostClick: PropTypes.func\r\n};\r\nexport default User;","import React from 'react';\r\nexport default function NotFound(){\r\n    return (\r\n        <div style={{textAlign:'center'}} className='container'>\r\n            <h1>404: Page not found</h1>\r\n        </div>\r\n    )\r\n};","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport GlobalStateProvider, { globalContext} from './Context/GlobalState';\nimport Home from './Components/Home';\nimport Register from './Components/Register';\nimport Login from './Components/Login';\nimport User from './Components/UserPage';\nimport NotFound from './Components/404';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n    <div className=\"App\">\n      <GlobalStateProvider>\n        <Switch>\n          <Route exact path='/ReactLoginProject' ><Home></Home></Route>\n          <Route path='/Register' ><Register></Register></Route>\n          <Route exact path='/Login' ><Login></Login></Route>\n          <Route path='/Login/User' ><User></User></Route>\n          <Route path='*'><NotFound></NotFound></Route>\n        </Switch>\n      </GlobalStateProvider>\n    </div>\n  );\n  }\n}\nApp.contextType = globalContext;\n\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}